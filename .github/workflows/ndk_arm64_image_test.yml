name: ndk arm64 image test
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Remove unnecessary packages
        run: |
          sudo systemctl stop docker.service
          sudo systemctl stop docker.socket
          sudo rm -rf /var/lib/docker
          sudo mkdir -p /var/lib/docker
          
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-android: 'false'
          remove-dotnet: 'false'
          remove-haskell: 'false'
          remove-codeql: 'false'
          remove-docker-images: 'false'
          build-mount-path: '/var/lib/docker'

      - name: Build Toolchain
        run: |
          CONTAINER_NAME="ubuntu"
          IMAGE_NAME="arm64v8/ubuntu:jammy"
          CHECKPOINT_DIR="$(pwd)/checkpoint"
          CHECKPOINT_IMAGE_NAME="$(sed 's/:.*/:checkpoint/' <<< "$IMAGE_NAME")"
          sudo add-apt-repository ppa:criu/ppa -y
          sudo apt update
          sudo apt install criu
          sudo sed -i -E "s#(.*ExecStart=/usr/bin/dockerd.*)#\1 --experimental --live-restore#g" /lib/systemd/system/docker.service
          sudo systemctl daemon-reload
          sudo systemctl restart docker.service
          sudo apt install qemu binfmt-support qemu-user-static
          wget https://github.com/krallin/tini/releases/download/v0.19.0/tini-static-arm64 -O tini-static
          chmod +x tini-static
          docker create --name "$CONTAINER_NAME" --platform linux/arm64 "$IMAGE_NAME"
          docker cp tini-static "$CONTAINER_NAME":/usr/bin/tini-static
          docker commit "$CONTAINER_NAME" "$CHECKPOINT_IMAGE_NAME"
          docker rmi -f "$IMAGE_NAME"
          docker rm -f "$CONTAINER_NAME"
          docker run --name "$CONTAINER_NAME" --platform linux/arm64 -e TERM=xterm -d "$CHECKPOINT_IMAGE_NAME" /usr/bin/tini-static -- sleep infinity
          docker rmi -f "$CHECKPOINT_IMAGE_NAME"
          #placeholder docker exec -u root "$CONTAINER_NAME" bash -c 'apt-get update; apt-get upgrade -y; apt-get install -y dialog apt-utils; apt-get install -y locales; sed -i -E "s/# (en_US.UTF-8)/\1/g" /etc/locale.gen; dpkg-reconfigure locales; apt-get install -y --no-install-recommends curl git python3-pip python3-venv python-is-python3 libgl-dev bison build-essential openssh-client clang cmake flex make pbzip2 texinfo uuid-runtime zip pipx; apt-get install -y gpg'
          #placeholder docker exec -u root "$CONTAINER_NAME" bash -c '\
          #placeholder cd $HOME; \
          #placeholder mkdir -p $HOME/bin; \
          #placeholder curl -L https://storage.googleapis.com/git-repo-downloads/repo -o $HOME/bin/repo; \
          #placeholder chmod a+x $HOME/bin/repo; \
          #placeholder export PATH="$HOME/bin:$PATH"; \
          #placeholder curl -L https://pyenv.run | bash; \
          #placeholder export PYENV_ROOT="$HOME/.pyenv"; \
          #placeholder [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"; \
          #placeholder eval "$(pyenv init -)"; \
          #placeholder eval "$(pyenv virtualenv-init -)"; \
          #placeholder export PATH=/root/.local/bin:$PATH \
          #placeholder '
          #placeholder docker checkpoint create --checkpoint-dir "$CHECKPOINT_DIR" "$CONTAINER_NAME" "$CONTAINER_NAME"
          #placeholder docker rm -f "$CONTAINER_NAME"
          #placeholder docker commit "$CONTAINER_NAME" "$CHECKPOINT_IMAGE_NAME"
          #placeholder sudo chown -R "$(id -un)" "$CHECKPOINT_DIR"
          #placeholder sudo chgrp -R "$(id -un)" "$CHECKPOINT_DIR"
          #placeholder docker save "$CHECKPOINT_IMAGE_NAME" | zip -r9q "$CHECKPOINT_DIR/$CONTAINER_NAME.zip"
          #placeholder docker rmi -f "$CHECKPOINT_IMAGE_NAME"
          #placeholder printf "@ -\n@=$CONTAINER_NAME.tar\n" | zipnote -w "$CHECKPOINT_DIR/$CONTAINER_NAME.zip"
          #placeholder zip -r9q "$CHECKPOINT_DIR.zip" "$CHECKPOINT_DIR"
          #placeholder echo "CHECKPOINT_ZIP_NAME=$(basename "$CHECKPOINT_DIR").zip" >> $GITHUB_ENV

#placeholder       - name: Upload Release
#placeholder         uses: svenstaro/upload-release-action@v2
#placeholder         with:
#placeholder            repo_token: ${{ secrets.GITHUB_TOKEN }}
#placeholder            file: ${{ env.CHECKPOINT_ZIP_NAME }}.zip
#placeholder            asset_name: ${{ env.CHECKPOINT_ZIP_NAME }}.zip
#placeholder            tag: "ndk_arm64_image"
#placeholder            overwrite: true

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
