name: ndk build
on:
  workflow_dispatch:
env:
  CONTAINER_NAME: "ubuntu"
  IMAGE_NAME: "ubuntu:jammy"

jobs:
  build_criu:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Build CRIU
        run: |
          mkdir -p criu
          wget https://github.com/checkpoint-restore/criu/archive/refs/tags/v3.19.tar.gz -O criu.tar.gz
          tar xf criu.tar.gz --strip-components=1 -C criu
          cd criu
          sed -i 's/#define DEFAULT_GHOST_LIMIT .*/#define DEFAULT_GHOST_LIMIT (1 << 31)/g' criu/include/cr_options.h
          sudo apt install -y --no-install-recommends gcc make build-essential libprotobuf-dev libprotobuf-c-dev protobuf-c-compiler protobuf-compiler python3-protobuf libdrm-dev python3-future libgnutls28-dev libaio-dev libnl-3-dev libnet-dev libcap-dev libnftables-dev iproute2 libbsd-dev pkg-config python3-full python3-pip python-is-python3 asciidoc xmlto
          python -m venv venv
          . venv/bin/activate
          pip install -U ipaddress
          deactivate
          cd ..

      - uses: actions/upload-artifact@v3
        with:
          name: criu
          path: criu/
          
  build_ndk_image:
    needs: build_criu
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Remove unnecessary packages
        run: |
          # sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(cabal-|dotnet-|ghc-|libmono|php|aspnetcore)') mono-runtime-common monodoc-manual ruby &>/dev/null
          # sudo apt purge -yq *make* *clang* *rust* &>/dev/null
          # sudo apt autoremove -yq &>/dev/null
          # sudo rm -rf /opt/hostedtoolcache /usr/local /usr/share/dotnet /usr/share/swift
          # sudo rm -rf /home/runner/.cargo
          sudo systemctl stop docker.service
          sudo systemctl stop docker.socket
          sudo rm -rf /var/lib/docker
          sudo mkdir -p /var/lib/docker
          
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'false'
          build-mount-path: '/var/lib/docker'

      - name: Install CRIU
        uses: actions/download-artifact@v3
        with:
          name: criu
          
      - run: |
          cd criu
          sudo make install

      - name: Split NDK
        run: |
          CONTAINER_NAME=${{ env.CONTAINER_NAME }}"
          IMAGE_NAME=${{ env.IMAGE_NAME }}"
          CHECKPOINT_DIR="$(pwd)/checkpoint"
          CHECKPOINT_IMAGE_NAME="$(sed 's/:.*/:checkpoint/' <<< "$IMAGE_NAME")"
          # sudo add-apt-repository ppa:criu/ppa -y
          # sudo apt update
          # sudo apt install criu
          sudo sed -i -E "s#(.*ExecStart=/usr/bin/dockerd.*)#\1 --experimental --live-restore#g" /lib/systemd/system/docker.service
          sudo systemctl daemon-reload
          sudo systemctl restart docker.service
          wget https://github.com/krallin/tini/releases/download/v0.19.0/tini-static-amd64 -O tini-static
          chmod +x tini-static
          docker create --name "$CONTAINER_NAME" "$IMAGE_NAME"
          docker cp tini-static "$CONTAINER_NAME":/usr/bin/tini-static
          docker commit "$CONTAINER_NAME" "$CHECKPOINT_IMAGE_NAME"
          docker rmi -f "$IMAGE_NAME"
          docker rm -f "$CONTAINER_NAME"
          docker run --name "$CONTAINER_NAME" -e "TERM=xterm" -d "$CHECKPOINT_IMAGE_NAME" /usr/bin/tini-static -- sleep infinity
          docker rmi -f "$CHECKPOINT_IMAGE_NAME"
          # docker exec -u root "$CONTAINER_NAME" bash -c 'apt-get update; apt-get upgrade -y; apt-get install -y dialog readline apt-utils; apt-get install -y locales; sed -i -E "s/# (en_US.UTF-8)/\1/g" /etc/locale.gen; dpkg-reconfigure locales; apt-get install -y --no-install-recommends curl git python3-pip python3-venv python-is-python3 openssh-client build-essential cmake clang; apt-get install -y gpg'
          # docker exec -u root "$CONTAINER_NAME" bash -c '\
          # cd $HOME; \
          # mkdir -p $HOME/bin; \ 
          # curl https://storage.googleapis.com/git-repo-downloads/repo -o $HOME/bin/repo; \
          # chmod a+x $HOME/bin/repo; \
          # export PATH=$HOME/bin:$PATH; \
          # curl -L https://pyenv.run | bash \
          # '
          # export PYENV_ROOT=$HOME/.pyenv; \
          # [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"; \
          # eval "$(pyenv init -)"; \
          # eval "$(pyenv virtualenv-init -)"; \
          # mkdir llvm-toolchain; \
          # cd llvm-toolchain; \
          # git config --global user.email "you@example.com"; \
          # git config --global user.name "Your Name"; \
          # yes | repo init -u https://android.googlesource.com/platform/manifest -b llvm-toolchain; \
          # repo sync -cj $(nproc --all); \
          # python toolchain/llvm_android/build.py --no-build windows --skip-tests \
          docker checkpoint create --checkpoint-dir "$CHECKPOINT_DIR" "$CONTAINER_NAME" "$CONTAINER_NAME"
          docker commit "$CONTAINER_NAME" "$CHECKPOINT_IMAGE_NAME"
          docker rm -f "$CONTAINER_NAME"
          sudo chown -R "$(id -un)" "$CHECKPOINT_DIR"
          sudo chgrp -R "$(id -un)" "$CHECKPOINT_DIR"
          # docker save "$CHECKPOINT_IMAGE_NAME" | zip -r9q "$CHECKPOINT_DIR/$CONTAINER_NAME.zip"
          docker save "$CHECKPOINT_IMAGE_NAME" | split --bytes=100M --filter 'gzip -1 > $FILE' - "$CHECKPOINT_DIR/$CONTAINER_NAME"_split_
          docker rmi -f "$CHECKPOINT_IMAGE_NAME"
          echo "CHECKPOINT_DIR=$CHECKPOINT_DIR" >> $GITHUB_ENV

      - name: Delete Old Backup
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: "split_${{ env.CONTAINER_NAME }}"

      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           file_glob: true
           file: ${{ env.CHECKPOINT_DIR }}/*
           tag: "split_${{ env.CONTAINER_NAME }}"
           make_latest: true
           overwrite: true

  cleanup:
    needs: build_ndk_image
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Cleanup
        uses: geekyeggo/delete-artifact@v2
        with:
            failOnError: false

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: "split_${{ env.CONTAINER_NAME }}"
